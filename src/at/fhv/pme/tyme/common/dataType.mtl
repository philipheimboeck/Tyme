[comment encoding = UTF-8 /]
[module dataType('http://www.eclipse.org/uml2/5.0.0/UML')]

[import at::fhv::pme::tyme::common::uml2service/]

[query public imports (aClass : Class) : OclAny = self/]

[query public operationsParameters(class : Class):Sequence(Parameter) = 
class.ownedOperation.ownedParameter->union(if(class.ownedOperation.returnResult()->notEmpty())then class.ownedOperation.returnResult()->asSequence() else Sequence{} endif )
/]

[query public operationsParametersTypes(class : Class):Sequence(Classifier) = 
class.operationsParameters().type->filter(Classifier)->select(not (name.endsWith('String')) and not (name.endsWith('Integer')) and not (name.endsWith('Float')) and not (name.endsWith('Long')) and not (name.endsWith('Double')) and not (name.endsWith('Boolean')) and not (name.startsWith('byte')) and not (name.endsWith('Object')) and not (name.endsWith('integer')) and not (name.endsWith('float')) and not (name.endsWith('long')) and not (name.endsWith('double')) and not (name.endsWith('boolean')))->asOrderedSet()->asSequence()
/]

[template public getCompleteName(namedElement:NamedElement) post (trim())]
[let packages : Sequence(Package) = namedElement.ancestors(Package)->select(not oclIsTypeOf(Model))]
	[packages.name->reverse()->sep('.')->toString().concat(if(packages->notEmpty())then '.' else '' endif).concat(namedElement.name)/]
[/let]
[/template]

[template public toJavaType(parameter:Parameter) post (trim())]
[if (parameter <> null)]
	[if (parameter.upper = -1)]
		[if (isOrdered)]
java.util.List<[parameter.type.toJavaType()/]>
		[elseif (isUnique)]
java.util.Set<[type.toJavaType()/]>
		[else]
java.util.Collection<[type.toJavaType()/]>
		[/if]
	[else]
[type.toJavaType()/]
	[/if]
[/if]
[/template]

[template public toJavaType(type:Type) post (trim())]
[type/]
[if (type.namespace.name='datatype' and getProperty('java.typeconversion.'+type.name)<>'')]
	[getProperty('java.typeconversion.'+type.name)/]
[else]
	[type.name/]
[/if]
[/template]

[template public generateReturn(operation:Operation)]
[if (type = null)]void[else][operation.returnResult().toJavaType()/][/if]
[/template]

[template public generateRawParameters(operation:Operation)]
[operation.getRealParameters()->filter(Parameter).genRawDeclare()->sep(', ')/]
[/template]

[template public genRawDeclare(parameter:Parameter)]
[parameter.toJavaType()/] [name.toLowerFirst()/]
[/template]

[template public generateCliOptions(operation:Operation)]
[for (p : Parameter | operation.getRealParameters()) separator(',')]
@CliOption(key = {"[p.getValue(p.getAppliedStereotype('profile::CliOption'), 'key')/]"}, mandatory = [p.getValue(p.getAppliedStereotype('profile::CliOption'), 'mandatory')/], help = "[p.getValue(p.getAppliedStereotype('profile::CliOption'), 'help')/]") [p.toJavaType()/] [p.name/]
[/for]
[/template]